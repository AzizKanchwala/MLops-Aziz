name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  # build-and-push-ecr-image:
  #   name: Continuous Delivery
  #   needs: integration
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Install Utilities
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y jq unzip
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build, tag, and push image to Amazon ECR
  #       id: build-image
  #       env:
  #         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
  #         ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
  #         IMAGE_TAG: latest
  #       run: |
  #         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
  #         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  #         echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  provision-and-setup-ec2:
    name: Provision EC2 & Setup Runner
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init

          INSTANCE_EXISTS=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=ci-runner" \
          "Name=instance-state-name,Values=running,pending" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)

          if [ -n "$INSTANCE_EXISTS" ]; then
            echo "INSTANCE WITH TAG 'ci-runner' ALREADY EXISTS. SKIP PROVISIONING."
            
            PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ci-runner" \
                  "Name=instance-state-name,Values=running" \
              --query "Reservations[0].Instances[0].PublicIpAddress" \
              --output text)
            
            echo "$PUBLIC_IP" > ../ansible/ec2_ip.txt
            cat ../ansible/ec2_ip.txt
          else
            terraform apply -auto-approve
            terraform output -raw public_ip > ../ansible/ec2_ip.txt
            cat ../ansible/ec2_ip.txt
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # - name: Install Ansible
      #   run: |
      #     sudo apt update
      #     sudo apt install -y ansible

      - name: Save SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > mlproj-key.pem
          chmod 400 mlproj-key.pem
          
      # - name: Run Ansible Playbook
      #   run: |
      #     cd ansible
      #     chmod 400 ../mlproj-key.pem
      #     ansible-playbook playbook.yaml -i ec2_ip.txt -u ubuntu --private-key ../mlproj-key.pem
  

          
          
  # Continuous-Deployment:
  #   needs: build-and-push-ecr-image
  #   runs-on: self-hosted
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       id: login-ecr
  #       uses: aws-actions/amazon-ecr-login@v1
      
      
  #     - name: Pull latest images
  #       run: |
  #        docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
       
  #     - name: Run Docker Image to serve users
  #       run: |
  #        docker run -d -p 8080:8080 --name=mlproj -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
  #     - name: Clean previous images and containers
  #       run: |
  #        docker system prune -f